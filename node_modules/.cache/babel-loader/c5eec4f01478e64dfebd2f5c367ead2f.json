{"ast":null,"code":"import _classCallCheck from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/tshabalutzi/Dokumente/HMES/Visualizer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n/**\n@author update Silvio Paganini\n*/\n// Update to support ES6 Threjs module importer\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finger swipe\nimport { Vector3, MOUSE, Quaternion, Spherical, Vector2, OrthographicCamera, PerspectiveCamera, EventDispatcher } from 'three';\n\nvar OrbitControls =\n/*#__PURE__*/\nfunction (_EventDispatcher) {\n  _inherits(OrbitControls, _EventDispatcher);\n\n  function OrbitControls(object, domElement) {\n    var _this;\n\n    _classCallCheck(this, OrbitControls);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrbitControls).call(this));\n    _this.object = object;\n    _this.domElement = domElement !== undefined ? domElement : document; // Set to false to disable this control\n\n    _this.enabled = true; // \"target\" sets the location of focus, where the object orbits around\n\n    _this.target = new Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )\n\n    _this.minDistance = 0;\n    _this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )\n\n    _this.minZoom = 0;\n    _this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n\n    _this.minPolarAngle = 0; // radians\n\n    _this.maxPolarAngle = Math.PI; // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\n    _this.minAzimuthAngle = -Infinity; // radians\n\n    _this.maxAzimuthAngle = Infinity; // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n\n    _this.enableDamping = false;\n    _this.dampingFactor = 0.25; // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n\n    _this.enableZoom = true;\n    _this.zoomSpeed = 1.0; // Set to false to disable rotating\n\n    _this.enableRotate = true;\n    _this.rotateSpeed = 1.0; // Set to false to disable panning\n\n    _this.enablePan = true;\n    _this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n\n    _this.autoRotate = false;\n    _this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n    // Set to false to disable use of the keys\n\n    _this.enableKeys = true; // The four arrow keys\n\n    _this.keys = {\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      BOTTOM: 40\n    }; // Mouse buttons\n\n    _this.mouseButtons = {\n      ORBIT: MOUSE.LEFT,\n      ZOOM: MOUSE.MIDDLE,\n      PAN: MOUSE.RIGHT\n    }; // for reset\n\n    _this.target0 = _this.target.clone();\n    _this.position0 = _this.object.position.clone();\n    _this.zoom0 = _this.object.zoom; //\n    // public methods\n    //\n\n    _this.getPolarAngle = function () {\n      return spherical.phi;\n    };\n\n    _this.getAzimuthalAngle = function () {\n      return spherical.theta;\n    };\n\n    _this.reset = function () {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(changeEvent);\n      scope.update();\n      state = STATE.NONE;\n    }; // this method is exposed, but perhaps it would be better if we can make it private...\n\n\n    _this.update = function () {\n      var offset = new Vector3(); // so camera.up is the orbit axis\n\n      var quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n      var quatInverse = quat.clone().inverse();\n      var lastPosition = new Vector3();\n      var lastQuaternion = new Quaternion();\n      return function update() {\n        var position = scope.object.position;\n        offset.copy(position).sub(scope.target); // rotate offset to \"y-axis-is-up\" space\n\n        offset.applyQuaternion(quat); // angle from z-axis around y-axis\n\n        spherical.setFromVector3(offset);\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n\n        spherical.theta += sphericalDelta.theta;\n        spherical.phi += sphericalDelta.phi; // restrict theta to be between desired limits\n\n        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta)); // restrict phi to be between desired limits\n\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n        spherical.makeSafe();\n        spherical.radius *= scale; // restrict radius to be between desired limits\n\n        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location\n\n        scope.target.add(panOffset);\n        offset.setFromSpherical(spherical); // rotate offset back to \"camera-up-vector-is-up\" space\n\n        offset.applyQuaternion(quatInverse);\n        position.copy(scope.target).add(offset);\n        scope.object.lookAt(scope.target);\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n        } else {\n          sphericalDelta.set(0, 0, 0);\n        }\n\n        scale = 1;\n        panOffset.set(0, 0, 0); // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          scope.dispatchEvent(changeEvent);\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          zoomChanged = false;\n          return true;\n        }\n\n        return false;\n      };\n    }();\n\n    _this.dispose = function () {\n      scope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n      scope.domElement.removeEventListener('mousedown', onMouseDown, false);\n      scope.domElement.removeEventListener('wheel', onMouseWheel, false);\n      scope.domElement.removeEventListener('touchstart', onTouchStart, false);\n      scope.domElement.removeEventListener('touchend', onTouchEnd, false);\n      scope.domElement.removeEventListener('touchmove', onTouchMove, false);\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n      window.removeEventListener('keydown', onKeyDown, false); //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }; //\n    // internals\n    //\n\n\n    var scope = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var changeEvent = {\n      type: 'change'\n    };\n    var startEvent = {\n      type: 'start'\n    };\n    var endEvent = {\n      type: 'end'\n    };\n    var STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_DOLLY: 4,\n      TOUCH_PAN: 5\n    };\n    var state = STATE.NONE;\n    var EPS = 0.000001; // current position in spherical coordinates\n\n    var spherical = new Spherical();\n    var sphericalDelta = new Spherical();\n    var scale = 1;\n    var panOffset = new Vector3();\n    var zoomChanged = false;\n    var rotateStart = new Vector2();\n    var rotateEnd = new Vector2();\n    var rotateDelta = new Vector2();\n    var panStart = new Vector2();\n    var panEnd = new Vector2();\n    var panDelta = new Vector2();\n    var dollyStart = new Vector2();\n    var dollyEnd = new Vector2();\n    var dollyDelta = new Vector2();\n\n    function getAutoRotationAngle() {\n      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n\n    function rotateLeft(angle) {\n      sphericalDelta.theta -= angle;\n    }\n\n    function rotateUp(angle) {\n      sphericalDelta.phi -= angle;\n    }\n\n    var panLeft = function () {\n      var v = new Vector3();\n      return function panLeft(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\n        v.multiplyScalar(-distance);\n        panOffset.add(v);\n      };\n    }();\n\n    var panUp = function () {\n      var v = new Vector3();\n      return function panUp(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\n\n        v.multiplyScalar(distance);\n        panOffset.add(v);\n      };\n    }(); // deltaX and deltaY are in pixels; right and down are positive\n\n\n    var pan = function () {\n      var offset = new Vector3();\n      return function pan(deltaX, deltaY) {\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n          // perspective\n          var position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          var targetDistance = offset.length(); // half of the fov is center to top of screen\n\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we actually don't use screenWidth, since perspective camera is fixed to screen height\n\n          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n        } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n          // orthographic\n          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n          scope.enablePan = false;\n        }\n      };\n    }();\n\n    function dollyIn(dollyScale) {\n      if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n        scale /= dollyScale;\n      } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n        scope.object.updateProjectionMatrix();\n        zoomChanged = true;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        scope.enableZoom = false;\n      }\n    }\n\n    function dollyOut(dollyScale) {\n      if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n        scale *= dollyScale;\n      } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n        scope.object.updateProjectionMatrix();\n        zoomChanged = true;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        scope.enableZoom = false;\n      }\n    } //\n    // event callbacks - update the object state\n    //\n\n\n    function handleMouseDownRotate(event) {\n      //console.log( 'handleMouseDownRotate' );\n      rotateStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownDolly(event) {\n      //console.log( 'handleMouseDownDolly' );\n      dollyStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownPan(event) {\n      //console.log( 'handleMouseDownPan' );\n      panStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseMoveRotate(event) {\n      //console.log( 'handleMouseMoveRotate' );\n      rotateEnd.set(event.clientX, event.clientY);\n      rotateDelta.subVectors(rotateEnd, rotateStart);\n      var element = scope.domElement === document ? scope.domElement.body : scope.domElement; // rotating across whole screen goes 360 degrees around\n\n      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n\n    function handleMouseMoveDolly(event) {\n      //console.log( 'handleMouseMoveDolly' );\n      dollyEnd.set(event.clientX, event.clientY);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyIn(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyOut(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n\n    function handleMouseMovePan(event) {\n      //console.log( 'handleMouseMovePan' );\n      panEnd.set(event.clientX, event.clientY);\n      panDelta.subVectors(panEnd, panStart);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n\n    function handleMouseUp(event) {// console.log( 'handleMouseUp' );\n    }\n\n    function handleMouseWheel(event) {\n      // console.log( 'handleMouseWheel' );\n      if (event.deltaY < 0) {\n        dollyOut(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyIn(getZoomScale());\n      }\n\n      scope.update();\n    }\n\n    function handleKeyDown(event) {\n      //console.log( 'handleKeyDown' );\n      switch (event.keyCode) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed);\n          scope.update();\n          break;\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed);\n          scope.update();\n          break;\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0);\n          scope.update();\n          break;\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0);\n          scope.update();\n          break;\n      }\n    }\n\n    function handleTouchStartRotate(event) {\n      //console.log( 'handleTouchStartRotate' );\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n    }\n\n    function handleTouchStartDolly(event) {\n      //console.log( 'handleTouchStartDolly' );\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n\n    function handleTouchStartPan(event) {\n      //console.log( 'handleTouchStartPan' );\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n    }\n\n    function handleTouchMoveRotate(event) {\n      //console.log( 'handleTouchMoveRotate' );\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      rotateDelta.subVectors(rotateEnd, rotateStart);\n      var element = scope.domElement === document ? scope.domElement.body : scope.domElement; // rotating across whole screen goes 360 degrees around\n\n      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n\n    function handleTouchMoveDolly(event) {\n      //console.log( 'handleTouchMoveDolly' );\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyEnd.set(0, distance);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n\n    function handleTouchMovePan(event) {\n      //console.log( 'handleTouchMovePan' );\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      panDelta.subVectors(panEnd, panStart);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n\n    function handleTouchEnd(event) {} //console.log( 'handleTouchEnd' );\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n\n    function onMouseDown(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n\n      if (event.button === scope.mouseButtons.ORBIT) {\n        if (scope.enableRotate === false) return;\n        handleMouseDownRotate(event);\n        state = STATE.ROTATE;\n      } else if (event.button === scope.mouseButtons.ZOOM) {\n        if (scope.enableZoom === false) return;\n        handleMouseDownDolly(event);\n        state = STATE.DOLLY;\n      } else if (event.button === scope.mouseButtons.PAN) {\n        if (scope.enablePan === false) return;\n        handleMouseDownPan(event);\n        state = STATE.PAN;\n      }\n\n      if (state !== STATE.NONE) {\n        document.addEventListener('mousemove', onMouseMove, false);\n        document.addEventListener('mouseup', onMouseUp, false);\n        scope.dispatchEvent(startEvent);\n      }\n    }\n\n    function onMouseMove(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n\n      if (state === STATE.ROTATE) {\n        if (scope.enableRotate === false) return;\n        handleMouseMoveRotate(event);\n      } else if (state === STATE.DOLLY) {\n        if (scope.enableZoom === false) return;\n        handleMouseMoveDolly(event);\n      } else if (state === STATE.PAN) {\n        if (scope.enablePan === false) return;\n        handleMouseMovePan(event);\n      }\n    }\n\n    function onMouseUp(event) {\n      if (scope.enabled === false) return;\n      handleMouseUp(event);\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n\n    function onMouseWheel(event) {\n      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n      event.preventDefault();\n      event.stopPropagation();\n      handleMouseWheel(event);\n      scope.dispatchEvent(startEvent); // not sure why these are here...\n\n      scope.dispatchEvent(endEvent);\n    }\n\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n      handleKeyDown(event);\n    }\n\n    function onTouchStart(event) {\n      if (scope.enabled === false) return;\n\n      switch (event.touches.length) {\n        case 1:\n          // one-fingered touch: rotate\n          if (scope.enableRotate === false) return;\n          handleTouchStartRotate(event);\n          state = STATE.TOUCH_ROTATE;\n          break;\n\n        case 2:\n          // two-fingered touch: dolly\n          if (scope.enableZoom === false) return;\n          handleTouchStartDolly(event);\n          state = STATE.TOUCH_DOLLY;\n          break;\n\n        case 3:\n          // three-fingered touch: pan\n          if (scope.enablePan === false) return;\n          handleTouchStartPan(event);\n          state = STATE.TOUCH_PAN;\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n\n    function onTouchMove(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (event.touches.length) {\n        case 1:\n          // one-fingered touch: rotate\n          if (scope.enableRotate === false) return;\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\n          handleTouchMoveRotate(event);\n          break;\n\n        case 2:\n          // two-fingered touch: dolly\n          if (scope.enableZoom === false) return;\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\n          handleTouchMoveDolly(event);\n          break;\n\n        case 3:\n          // three-fingered touch: pan\n          if (scope.enablePan === false) return;\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\n          handleTouchMovePan(event);\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n    }\n\n    function onTouchEnd(event) {\n      if (scope.enabled === false) return;\n      handleTouchEnd(event);\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n\n    function onContextMenu(event) {\n      event.preventDefault();\n    } //\n\n\n    scope.domElement.addEventListener('contextmenu', onContextMenu, false);\n    scope.domElement.addEventListener('mousedown', onMouseDown, false);\n    scope.domElement.addEventListener('wheel', onMouseWheel, false);\n    scope.domElement.addEventListener('touchstart', onTouchStart, false);\n    scope.domElement.addEventListener('touchend', onTouchEnd, false);\n    scope.domElement.addEventListener('touchmove', onTouchMove, false);\n    window.addEventListener('keydown', onKeyDown, false); // force an update at start\n\n    _this.update();\n\n    return _this;\n  }\n\n  _createClass(OrbitControls, [{\n    key: \"center\",\n    get: function get() {\n      console.warn('OrbitControls: .center has been renamed to .target');\n      return this.target;\n    } // backward compatibility\n\n  }, {\n    key: \"noZoom\",\n    get: function get() {\n      console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n      return !this.enableZoom;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n      this.enableZoom = !value;\n    }\n  }, {\n    key: \"noRotate\",\n    get: function get() {\n      console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n      return !this.enableRotate;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n      this.enableRotate = !value;\n    }\n  }, {\n    key: \"noPan\",\n    get: function get() {\n      console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n      return !this.enablePan;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n      this.enablePan = !value;\n    }\n  }, {\n    key: \"noKeys\",\n    get: function get() {\n      console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n      return !this.enableKeys;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n      this.enableKeys = !value;\n    }\n  }, {\n    key: \"staticMoving\",\n    get: function get() {\n      console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n      return !this.enableDamping;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n      this.enableDamping = !value;\n    }\n  }, {\n    key: \"dynamicDampingFactor\",\n    get: function get() {\n      console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n      return this.dampingFactor;\n    },\n    set: function set(value) {\n      console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n      this.dampingFactor = value;\n    }\n  }]);\n\n  return OrbitControls;\n}(EventDispatcher);\n\nexport { OrbitControls as default };","map":null,"metadata":{},"sourceType":"module"}